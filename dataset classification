from math import gamma
import sys
from unittest import result
print("python: {}".format (sys.version))
import scipy
print("scipy: {}".format (scipy._version_))
import Numpy
print("Numpy: {}".format (Numpy._version_))
import matplotlib
print("Matplotlib: {}".format (Matplotlib._version_))
import pandas
print("pandas: {}".format (pandas._version_))
import sklearn
print("sklearn: {}".format (sklearn._version_))

import pandas 
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedGroupKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB  
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier

url="https://raw.githubusercontent.com/jbrownlee/Datasets/master.iris.csv"
names=["sepal-length","sepal-width","petal-length","class"]
dataset=read_csv(url,names=names)


print(dataset.shape)
print(dataset.head(20))
print(dataset.describe())
print(dataset.groupby("class").size())

dataset.plot(kind="box",subplots=true,layout=(2,2),sharex=False,sharey=False)
pyplot.show()

dataset.hist()
pyplot.show()


scatter_matrix(dataset)
pyplot.show()



array=dataset.values
x=array[:,0:4]
y=array[:,4]
x_train,X_valudation,Y_train,Y_valudation=train_test_split(x,y,test_size=0.2,random_state=1)
models=[]
models.append("LR",LogisticRegression(solver="liblinear",multi_class="ovr"))
models.append("LDA",LinearDiscriminantAnalysis)
models.append(("KNN",KNeighborsClassifier()))
models.append("NB",GaussianNB())
models.append("SVM",SVC(gamma="auto"))




results=[]
names=[]
for name,model in models:
    kfold=StratifiedKFold(n_splits=10,random_state=1)
    cv_results=cross_val_score(model,x_train,Y_train,cv=kfold,scoring="accuracy")
    results.append(cv_results)
    names.append(name)
    print("%s: %f(%f)"% (name,cv_results.mean(),cv_results.std()))
    
    
    pyplot.boxplot(results,labels=names)
    pyplot.title("algorithm comparison")
    pyplot.show()
    
    
    
    model=SVC=(gamma="auto")
    model.fit(x_train,Y_train)
    predictions=model.predict(X_valudation)
    
    
    print(accuracy_score(Y_valudation,predictions))
    print(confusion_matrix(Y_valudation,predictions))
    print(classification_report(Y_valudation,predictions))


